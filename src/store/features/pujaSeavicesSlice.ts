import { SearchPujaFiltersParams } from "@/types/pujaService";
import { createSlice } from "@reduxjs/toolkit";

interface PujaServicesState {
  isOpenFilters: boolean;
  filters: {
    category?: string;
    trending?: string;
    tags?: string[];
    location?: string;
    priceRange?: [number, number];
    rating?: number;
    sortBy?: string;
    searchQuery?: string;
  };
}

// Define the initial state for the puja services slice
const initialState: PujaServicesState = {
  isOpenFilters: false,
  filters: {
    category: "",
    trending: "",
    tags: [],
    searchQuery: "",
  },
};

// Create the puja services slice
export const pujaServicesSlice = createSlice({
  name: "pujaServices",
  initialState,
  reducers: {
    setIsOpenFilters: (state, action) => {
      state.isOpenFilters = action.payload;
    },

    setTagsFilter: (state, action: { payload: string | undefined }) => {
      if (!action.payload) return;

      if (state.filters?.tags?.includes(action.payload)) {
        state.filters.tags = state.filters.tags.filter(
          (tag) => tag !== action.payload
        );
      } else {
        state.filters.tags = state.filters.tags || [];
        state.filters.tags.push(action.payload);
      }
    },

    setFilters: (state, action) => {
      state.filters = { ...state.filters, ...action.payload };
    },

    resetFilters: (state) => {
      state.filters = {};
    },

    // update filters by search query params
    updateFiltersBySearchParams: (
      state,
      action: {
        payload: SearchPujaFiltersParams;
      }
    ) => {
      state.filters.searchQuery = action.payload?.searchQuery || "";
      state.filters.category = action.payload?.category || "";
      state.filters.trending = action.payload?.trending || "";
      state.filters.tags = action.payload?.tags || [];
    },
  },
});

// Export the actions generated by the slice
export const {
  setIsOpenFilters,
  setFilters,
  resetFilters,
  setTagsFilter,
  updateFiltersBySearchParams,
} = pujaServicesSlice.actions;
